import numpy as np
import pandas as pd
from ship_class import ship
from manoeuvre_model_rpa3 import ship_model
import matplotlib.pyplot as plt
ship = ship()
# ship_model = ship_model()
coef_ = np.genfromtxt('foo_rpa3.csv', delimiter=',')
df_main = pd.read_csv('test_sunday_evening.csv', sep=',')


x = [12035.946865902892, 216.28401606287355, -20.66517375103224, 10.6248865052674, -669.8306500784897, 14223.981780210705, 1300558.3241777467, -557607.6248915766, -4026.1343444164427, 64410.76661334384, -166005.66647936945, 39027.751078713045, 188.11784074262937, -55.56590371598705, 38994.71397700381, -0.7695149681161807, 5.523822044608639, -72.46538477239875, 1220.4554450609642, 489.1498977140583, 124.58798521399925, 193.68811899548493, -62.45751750415726, -180.1757328519027, -514.2127682915972, 914173.1049592822, 6029.798211270746, -24.05931694768569, -2188.8721237244717, 103.59690696009257, 17.803571892178546, -423.95719615396075, -41394.57055797514, 1746.229222805502, 1113.3367594776014, 1185.7951896797415, 1020.4924177926034, -1097.464361151619, 11560.896860252325]
x = [12265.413771125297, 213.97888757516822, -20.475133560767915, 10.584364181422258, -666.3521820737138, 14166.909742149457, 1325384.6295565094, -555434.478025248, -3976.23729752589, 64047.44872700686, -165977.96904977714, 39021.34054591839, 186.35824947190656, -55.44347862494166, 38967.50350302725, -0.7764549503413122, 5.497637793285529, -73.4353424537233, 1222.4006380053813, 488.48760089258013, 125.5606024295419, 193.5545665387447, -62.23725208448725, -179.8186428117522, -516.0785931554993, 898915.5778441449, 6031.027851669266, -23.868552904001486, -2196.610806978895, 103.93245112627847, 17.765032615545888, -422.2083406891573, -41277.98726837893, 1743.0404832063523, 1126.4445992447743, 1164.632843461022, 1026.538488009444, -1112.8693939239654, 11398.53779217139]
x = [12252.4236298743, 217.17058204538702, -20.261824003665406, 10.583518909568877, -675.9318078267933, 14069.43149912216, 1306560.127390965, -552689.4033520519, -3991.732264939594, 64688.404675734186, -165675.25694090803, 39022.54691437656, 189.17875318522948, -54.974849782748805, 38993.02642550298, -0.776484823084345, 5.443714760246569, -72.82131013070256, 1221.8424288147846, 495.29041534154595, 125.04848184364815, 196.55436022531933, -62.25827254009901, -179.33990988892782, -518.3115630975738, 914173.1049592822, 5998.739132027576, -23.942078886958363, -2165.726149555569, 105.5253020028695, 17.454944475322726, -417.63749996535773, -41656.713983534304, 1717.361225739316, 1135.1181872308355, 1185.7951896797415, 1012.908730801411, -1099.133383339663, 11527.049944766359]
x = [12230.878823744088, 213.59100427417252, -20.335335185775662, 10.583518909568877, -679.3895037650827, 14137.519801312581, 1324511.5378030378, -557713.9995474718, -3946.408911853741, 64340.496416737435, -166472.88924102654, 39053.52700207706, 186.80836668260898, -55.84249324905346, 38963.85258535827, -0.7638980269559611, 5.553688795807106, -72.88061313932813, 1234.6770225780328, 494.0789427278475, 125.4685972757831, 197.25359403887913, -61.909183608807076, -176.74015589663537, -511.0375772037025, 903838.0622666723, 5970.181806750287, -23.795466954931594, -2184.768278902825, 104.7731589687432, 17.56238550650245, -420.2144848815841, -41057.34774319341, 1719.8049936629611, 1129.4437605931646, 1168.145567413772, 1017.5730495124158, -1092.8234544742966, 11411.932624310279]
x = [12095.811242891594, 214.52651523969482, -20.66517375103224, 10.797327372388452, -670.7961368754784, 14227.164250789421, 1321177.0059898833, -555308.8668508747, -3991.342781789317, 63595.13890650619, -167394.91748422536, 39027.94100266655, 187.3062079103247, -55.22827452596873, 38968.3515351407, -0.768144185865156, 5.443714760246569, -73.92933193951791, 1217.9655908797604, 488.3162127839374, 125.15412062899516, 194.88191356455187, -61.53188074928773, -179.34500869629164, -511.5435806486844, 905539.0893507439, 6017.091821087736, -23.68268540591774, -2195.1824543850453, 105.52858027964433, 17.451025914115604, -423.9811757014331, -40858.89795702479, 1746.3946520449667, 1123.3868231692015, 1162.3140968147961, 1019.2068291887288, -1100.7324591224883, 11384.438046482417]
coef_ = np.array([np.asarray(x[:11]),np.asarray(x[11:25]),np.asarray(x[25:])])


df_main = df_main[30:750]
# df_main.rsa = df_main.rsa*0.88
u, v, r, hdg = df_main.loc[df_main.index[0], 'u'],df_main.loc[df_main.index[0], 'v'], df_main.loc[df_main.index[0], 'r'], df_main.loc[df_main.index[0], 'hdg']
ship_model = ship_model(df_main.loc[df_main.index[0], 'u_dot'],df_main.loc[df_main.index[0], 'v_dot'], df_main.loc[df_main.index[0], 'r_dot'], ship, coef_)

df_input = df_main[['rpm', 'rsa']]
print(u, v, r, hdg)
df_sim = pd.DataFrame([])
for i in df_main[:-1].index:
    u, v, r, hdg, delta_x_0, delta_y_0, delta_r_0, u_dot, v_dot, r_dot = ship_model.manoeuvre_model_rpa_3(u, v, r, hdg,
                                                                                                   df_main.loc[i, 'rpm']/60.,
                                                                                                   df_main.loc[i, 'rsa'], 
                                                                                                   df_main.loc[i, 'delta_time'],
                                                                                                   )
    df_temp = pd.DataFrame({
                        'index_sim' : [i+1],
                        'x_delta_sim': [delta_x_0],
                        'y_delta_sim': [delta_y_0],
                        'hdg_delta_sim': [delta_r_0]
                                        })
    df_sim = pd.concat([df_sim, df_temp], axis=0)
    
df_main = pd.merge(df_main, df_sim, how='left', left_on=df_main.index, right_on='index_sim')

df_main['x_real_sim'] = df_main.x_delta_sim.cumsum()
df_main['y_real_sim'] = df_main.y_delta_sim.cumsum()
df_main['psi_sim'] = df_main.hdg_delta_sim.cumsum()

df_main['x_real'] = df_main.x.cumsum()
df_main['y_real'] = df_main.y.cumsum()
    
df_main['traj_error'] = (np.sqrt((df_main['x_real_sim'] - df_main['x_real'])**2 + (df_main['y_real_sim'] - df_main['y_real'])**2)).cumsum()
df_main['x_sim_diff_avg'] = df_main['x_real_sim'] - df_main.x_delta_sim.mean()
df_main['y_sim_diff_avg'] = df_main['y_real_sim'] - df_main.y_delta_sim.mean()

df_main['x_real_diff_avg'] = df_main['x_real'] - df_main.x.mean()
df_main['y_real_diff_avg'] = df_main['y_real'] - df_main.y.mean()

rho_x = (df_main['x_sim_diff_avg']*df_main['x_real_diff_avg']).sum()/np.sqrt((df_main['x_sim_diff_avg']**2).sum()*(df_main['x_real_diff_avg']**2).sum() )
rho_y = (df_main['y_sim_diff_avg']*df_main['y_real_diff_avg']).sum()/np.sqrt((df_main['y_sim_diff_avg']**2).sum()*(df_main['y_real_diff_avg']**2).sum() )
    
plt.plot(df_main.x_real.tolist()[:],df_main.y_real.tolist()[:])
plt.plot(df_main.x_real_sim.tolist()[:],df_main.y_real_sim.tolist()[:])
# plt.plot(df_main.traj_error)
plt.savefig('rpatraj.png')
plt.show()
print(rho_x*rho_y)
df_main['x_diff'] = abs(df_main.x_delta_sim - df_main.x)
df_main['y_diff'] = abs(df_main.y_delta_sim - df_main.y)
df_main['error'] = np.sqrt(df_main.x_diff**2 + df_main.y_diff**2)


feature = df_main.error.cumsum().iloc[-1]

# load initial states (lengte brackets bepalen van simuleren om error te bepalen. )
# recognize manoeuvre segments from trajectory


# use separate manoeuvres to compare performance 